version: 2
jobs:
  test:
    parallelism: 1
    docker:
      - image: circleci/elixir:1.6.6
        environment:
          MIX_ENV: test
      - image: circleci/postgres:10.1-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: app_test
          POSTGRES_PASSWORD:

    working_directory: ~/app

    steps:
      - checkout
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix do deps.get, compile
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: mix ecto.create
      - run:
          name: Test
          command: mix test
      - store_test_results:
          path: _build/test/lib/phx_docker_service

  deploy:
    docker:
      - image: circleci/elixir:1.6.6
    environment:
      MIX_ENV: prod
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Elixir/Phoenix environmentmix
          command: |
            local.hex --force
            mix local.rebar --force
            mix deps.get
      - run:
          name: Release project
          command: MIX_ENV=prod mix do release.init, release
      - run:
          name: Setup server
          command: ssh -o StrictHostKeyChecking=no $AWS_USER@$AWS_HOST "rm -rf ~/tmp && mkdir -p ~/tmp"
      - run:
          name: Send bundled zip file to server
          command: scp -o StrictHostKeyChecking=no "./_build/prod/rel/${SERVICE_NAME}/releases/`cat VERSION`/${SERVICE_NAME}.tar.gz" "${AWS_USER}@${AWS_HOST}:~/tmp"
      - run:
          name: Unzip bundled file
          command: |
            ssh $AWS_USER@$AWS_HOST "sudo su - ec2-user"
            ssh $AWS_USER@$AWS_HOST "cd /app/${SERVICE_NAME}/releases && sudo mkdir -p `cat VERSION`"
            ssh $AWS_USER@$AWS_HOST "sudo cp ~/tmp/${SERVICE_NAME}.tar.gz /app/${SERVICE_NAME}/releases/`cat VERSION`/${SERVICE_NAME}.tar.gz"
            ssh $AWS_USER@$AWS_HOST "sudo tar zxvf /app/${SERVICE_NAME}/releases/`cat VERSION`/${SERVICE_NAME}.tar.gz -C /app/${SERVICE_NAME}/releases"
      - deploy:
          name: Restart service
          command: |
            ssh $AWS_USER@$AWS_HOST "cd /app/${SERVICE_NAME}/releases"
            ssh $AWS_USER@$AWS_HOST "ls -la"
            ssh $AWS_USER@$AWS_HOST "bin/${SERVICE_NAME} stop"
            ssh $AWS_USER@$AWS_HOST "bin/${SERVICE_NAME} start"

workflows:
  version: 2
  build-test-deploy:
    jobs:
      # - test
      - deploy
          # filters:
          #   branches:
          #     only: master
